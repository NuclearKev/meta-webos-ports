From 503f0e50da375b1c17ad5062c1b2c1eace35083e Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Sun, 27 Sep 2015 21:39:56 +0200
Subject: [PATCH 03/10] WebContents: provide additional features from
 window.open to the client side

* Also, parse these features in a way that take into account JSON values.
* Also redirect calls to old AddNewContent to the new API, with empty additional features.

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 .../browser/web_contents/web_contents_impl.cc      |  2 +-
 .../content/public/browser/web_contents_delegate.h | 21 ++++++++++++++++++++-
 .../WebKit/Source/core/page/CreateWindow.cpp       | 22 ++++++++++++++++++++--
 3 files changed, 41 insertions(+), 4 deletions(-)

diff --git a/chromium/content/browser/web_contents/web_contents_impl.cc b/chromium/content/browser/web_contents/web_contents_impl.cc
index 559e121..4e42aa0 100644
--- a/chromium/content/browser/web_contents/web_contents_impl.cc
+++ b/chromium/content/browser/web_contents/web_contents_impl.cc
@@ -2354,7 +2354,7 @@ void WebContentsImpl::CreateNewWindow(
 
       delegate_->AddNewContents(
           this, new_contents, params.disposition, initial_rect,
-          params.user_gesture, &was_blocked);
+          params.user_gesture, &was_blocked, params.additional_features);
 
       if (!weak_new_contents)
         return;  // The delegate deleted |new_contents| during AddNewContents().
diff --git a/chromium/content/public/browser/web_contents_delegate.h b/chromium/content/public/browser/web_contents_delegate.h
index e62fe35..b7ecc61 100644
--- a/chromium/content/public/browser/web_contents_delegate.h
+++ b/chromium/content/public/browser/web_contents_delegate.h
@@ -126,7 +126,26 @@ class CONTENT_EXPORT WebContentsDelegate {
                               WindowOpenDisposition disposition,
                               const gfx::Rect& initial_rect,
                               bool user_gesture,
-                              bool* was_blocked) {}
+                              bool* was_blocked) {
+      std::vector<base::string16> additional_features;
+      AddNewContents(source,new_contents,disposition,initial_rect,user_gesture,was_blocked, additional_features);
+  }
+
+  // Creates a new tab with the already-created WebContents 'new_contents'.
+  // The window for the added contents should be reparented correctly when this
+  // method returns.  If |disposition| is NEW_POPUP, |initial_rect| should hold
+  // the initial position. If |was_blocked| is non-NULL, then |*was_blocked|
+  // will be set to true if the popup gets blocked, and left unchanged
+  // otherwise.
+  virtual void AddNewContents(WebContents* source,
+                              WebContents* new_contents,
+                              WindowOpenDisposition disposition,
+                              const gfx::Rect& initial_rect,
+                              bool user_gesture,
+                              bool* was_blocked,
+                              std::vector<base::string16> additional_features) {
+      AddNewContents(source,new_contents,disposition,initial_rect,user_gesture,was_blocked);
+  }
 
   // Selects the specified contents, bringing its container to the front.
   virtual void ActivateContents(WebContents* contents) {}
diff --git a/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp b/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp
index 6e14190..1e02075 100644
--- a/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp
+++ b/chromium/third_party/WebKit/Source/core/page/CreateWindow.cpp
@@ -204,8 +204,24 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string) {
     SECURITY_DCHECK(i <= length);
 
     // skip to first separator
-    while (i < length && !IsWindowFeaturesSeparator(buffer[i]))
-      i++;
+    if (i < length && buffer[i] == '{') {
+        // json value: go to the matching '}'
+        int unmatchedBraceCount = 0;
+        while (i < length) {
+            if (buffer[i] == '{')
+                unmatchedBraceCount++;
+            else if (buffer[i] == '}')
+                unmatchedBraceCount--;
+            i++;
+            if (unmatchedBraceCount <= 0)
+                break;
+        }
+    }
+    else {
+        // classic case: skip to first separator
+        while (i < length && !isWindowFeaturesSeparator(buffer[i]))
+          i++;
+    }
     value_end = i;
 
     SECURITY_DCHECK(i <= length);
@@ -240,6 +256,8 @@ WebWindowFeatures GetWindowFeaturesFromString(const String& feature_string) {
       window_features.status_bar_visible = value;
     } else if (key_string == "scrollbars") {
       window_features.scrollbars_visible = value;
+    } else if (keyString == "attributes") {
+      window_features.additionalFeatures = value;
     } else if (key_string == "resizable") {
       window_features.resizable = value;
     } else if (key_string == "noopener") {
-- 
2.7.4


From 4dc15d90a1ddc8f28224cee6c2cf16e54ef5a493 Mon Sep 17 00:00:00 2001
From: Christophe Chapuis <chris.chapuis@gmail.com>
Date: Sun, 27 Sep 2015 21:39:56 +0200
Subject: [PATCH 2/7] WebContents: provide additional features from window.open
 to the client side

* Also, parse these features in a way that take into account JSON values.
* Also redirect calls to old AddNewContent to the new API, with empty additional features.
* Store the additional window features related to LuneOS in the WebContentsView object
* - additional_features (from window.open parameter)
* - initial target URL
* Update additional params from Chromium 53->56

Signed-off-by: Christophe Chapuis <chris.chapuis@gmail.com>
---
 .../browser/web_contents/web_contents_impl.cc | 14 +++++++++--
 .../browser/web_contents/web_contents_view.h  |  8 +++++++
 .../public/browser/web_contents_delegate.h    | 21 +++++++++++++++-
 .../common/common_param_traits_macros.h       |  1 +
 .../Source/core/page/WindowFeatures.cpp       | 24 ++++++++++++++++---
 .../WebKit/public/web/WebWindowFeatures.h     | 15 ++++++++----
 .../public/web/WindowFeaturesStructTraits.cpp |  2 ++
 .../public/web/WindowFeaturesStructTraits.h   |  4 ++++
 .../WebKit/public/web/window_features.mojom   |  2 ++
 9 files changed, 81 insertions(+), 10 deletions(-)

diff --git a/chromium/content/browser/web_contents/web_contents_impl.cc b/chromium/content/browser/web_contents/web_contents_impl.cc
index a34ccc6088..9e2f68e47f 100644
--- a/chromium/content/browser/web_contents/web_contents_impl.cc
+++ b/chromium/content/browser/web_contents/web_contents_impl.cc
@@ -2094,6 +2094,10 @@ void WebContentsImpl::CreateNewWindow(
       rfh->Init();
     return;
   }
+  
+  std::vector<base::string16> additional_features;
+  for (auto webStr : params.features.additionalFeatures)
+    additional_features.push_back(webStr);
 
   // Create the new web contents. This will automatically create the new
   // WebContentsView. In the future, we may want to create the view separately.
@@ -2136,6 +2140,11 @@ void WebContentsImpl::CreateNewWindow(
     if (!is_guest) {
       WebContentsView* new_view = new_contents->view_.get();
 
+      // set the additional features required by the LuneOS app
+      // (ideally this information should be propagated using the IPC messaging)
+      new_view->setWindowAdditionalFeatures(additional_features);
+      new_view->setInitialTargetURL(params.target_url);
+
       // TODO(brettw): It seems bogus that we have to call this function on the
       // newly created object and give it one of its own member variables.
       new_view->CreateViewForWidget(
@@ -2168,7 +2177,7 @@ void WebContentsImpl::CreateNewWindow(
       gfx::Rect initial_rect;
       delegate_->AddNewContents(
           this, new_contents, params.disposition, initial_rect,
-          params.user_gesture, &was_blocked);
+          params.user_gesture, &was_blocked, additional_features);
     }
     if (!was_blocked) {
       OpenURLParams open_params(params.target_url, params.referrer,
@@ -2254,8 +2263,9 @@ void WebContentsImpl::ShowCreatedWindow(int process_id,
       contents->ResumeLoadingCreatedWebContents();
 
     if (delegate) {
+      std::vector<base::string16> additional_features = contents->view_.get()->getWindowAdditionalFeatures();
       delegate->AddNewContents(
-          this, contents, disposition, initial_rect, user_gesture, NULL);
+          this, contents, disposition, initial_rect, user_gesture, NULL, additional_features);
     }
   }
 }
diff --git a/chromium/content/browser/web_contents/web_contents_view.h b/chromium/content/browser/web_contents/web_contents_view.h
index e4401f85bf..aa2f79145d 100644
--- a/chromium/content/browser/web_contents/web_contents_view.h
+++ b/chromium/content/browser/web_contents/web_contents_view.h
@@ -13,6 +13,7 @@
 #include "ui/gfx/geometry/rect.h"
 #include "ui/gfx/geometry/size.h"
 #include "ui/gfx/native_widget_types.h"
+#include "url/gurl.h"
 
 namespace content {
 class RenderViewHost;
@@ -131,6 +132,13 @@ class WebContentsView {
   virtual bool IsEventTracking() const = 0;
   virtual void CloseTabAfterEventTracking() = 0;
 #endif
+
+  // Add accessors to set/get the window additional features wanted by the LuneOS apps
+  // The actual implementation is done in web_contents_view_qt.h
+  virtual void setWindowAdditionalFeatures(const std::vector<base::string16> &additional_features) {}
+  virtual std::vector<base::string16> getWindowAdditionalFeatures() {}
+  virtual void setInitialTargetURL(const GURL &initialURL) {}
+  virtual GURL getInitialTargetURL() {}
 };
 
 }  // namespace content
diff --git a/chromium/content/public/browser/web_contents_delegate.h b/chromium/content/public/browser/web_contents_delegate.h
index 2beb83c3b7..aec4195711 100644
--- a/chromium/content/public/browser/web_contents_delegate.h
+++ b/chromium/content/public/browser/web_contents_delegate.h
@@ -118,7 +118,26 @@ class CONTENT_EXPORT WebContentsDelegate {
                               WindowOpenDisposition disposition,
                               const gfx::Rect& initial_rect,
                               bool user_gesture,
-                              bool* was_blocked) {}
+                              bool* was_blocked) {
+      std::vector<base::string16> additional_features;
+      AddNewContents(source,new_contents,disposition,initial_rect,user_gesture,was_blocked, additional_features);
+  }
+
+  // Creates a new tab with the already-created WebContents 'new_contents'.
+  // The window for the added contents should be reparented correctly when this
+  // method returns.  If |disposition| is NEW_POPUP, |initial_rect| should hold
+  // the initial position. If |was_blocked| is non-NULL, then |*was_blocked|
+  // will be set to true if the popup gets blocked, and left unchanged
+  // otherwise.
+  virtual void AddNewContents(WebContents* source,
+                              WebContents* new_contents,
+                              WindowOpenDisposition disposition,
+                              const gfx::Rect& initial_rect,
+                              bool user_gesture,
+                              bool* was_blocked,
+                              std::vector<base::string16> additional_features) {
+      AddNewContents(source,new_contents,disposition,initial_rect,user_gesture,was_blocked);
+  }
 
   // Selects the specified contents, bringing its container to the front.
   virtual void ActivateContents(WebContents* contents) {}
diff --git a/chromium/content/public/common/common_param_traits_macros.h b/chromium/content/public/common/common_param_traits_macros.h
index c4568af7fb..457fd2d41e 100644
--- a/chromium/content/public/common/common_param_traits_macros.h
+++ b/chromium/content/public/common/common_param_traits_macros.h
@@ -267,6 +267,7 @@ IPC_STRUCT_TRAITS_BEGIN(blink::WebWindowFeatures)
   IPC_STRUCT_TRAITS_MEMBER(resizable)
   IPC_STRUCT_TRAITS_MEMBER(fullscreen)
   IPC_STRUCT_TRAITS_MEMBER(dialog)
+  IPC_STRUCT_TRAITS_MEMBER(additionalFeatures)
 IPC_STRUCT_TRAITS_END()
 
 IPC_ENUM_TRAITS_MAX_VALUE(ui::AXEvent, ui::AX_EVENT_LAST)
diff --git a/chromium/third_party/WebKit/Source/core/page/WindowFeatures.cpp b/chromium/third_party/WebKit/Source/core/page/WindowFeatures.cpp
index f1d78f9e45..82614af28b 100644
--- a/chromium/third_party/WebKit/Source/core/page/WindowFeatures.cpp
+++ b/chromium/third_party/WebKit/Source/core/page/WindowFeatures.cpp
@@ -89,7 +89,7 @@ WindowFeatures::WindowFeatures(const String& features)
 
     // skip to first separator
     while (i < length && !isWindowFeaturesSeparator(buffer[i]))
-      i++;
+        i++;
     keyEnd = i;
 
     SECURITY_DCHECK(i <= length);
@@ -115,8 +115,24 @@ WindowFeatures::WindowFeatures(const String& features)
     SECURITY_DCHECK(i <= length);
 
     // skip to first separator
-    while (i < length && !isWindowFeaturesSeparator(buffer[i]))
-      i++;
+    if (i < length && buffer[i] == '{') {
+        // json value: go to the matching '}'
+        int unmatchedBraceCount = 0;
+        while (i < length) {
+            if (buffer[i] == '{')
+                unmatchedBraceCount++;
+            else if (buffer[i] == '}')
+                unmatchedBraceCount--;
+            i++;
+            if (unmatchedBraceCount <= 0)
+                break;
+        }
+    }
+    else {
+        // classic case: skip to first separator
+        while (i < length && !isWindowFeaturesSeparator(buffer[i]))
+          i++;
+    }
     valueEnd = i;
 
     SECURITY_DCHECK(i <= length);
@@ -166,6 +182,8 @@ void WindowFeatures::setWindowFeature(const String& keyString,
     fullscreen = value;
   } else if (keyString == "scrollbars") {
     scrollbarsVisible = value;
+  } else if (keyString == "attributes") {
+    additionalFeatures.append(keyString+"="+valueString);
   } else if (keyString == "noopener") {
     noopener = true;
   } else if (value == 1) {
diff --git a/chromium/third_party/WebKit/public/web/WebWindowFeatures.h b/chromium/third_party/WebKit/public/web/WebWindowFeatures.h
index a1f6743c08..7c11a7da4e 100644
--- a/chromium/third_party/WebKit/public/web/WebWindowFeatures.h
+++ b/chromium/third_party/WebKit/public/web/WebWindowFeatures.h
@@ -60,7 +60,7 @@ struct WebWindowFeatures {
 
   bool fullscreen;
   bool dialog;
-  WebVector<WebString> additionalFeatures;
+  std::vector<base::string16> additionalFeatures;
 
   WebWindowFeatures()
       : x(0),
@@ -97,8 +97,15 @@ struct WebWindowFeatures {
         scrollbarsVisible(f.scrollbarsVisible),
         resizable(f.resizable),
         fullscreen(f.fullscreen),
-        dialog(f.dialog),
-        additionalFeatures(f.additionalFeatures) {}
+        dialog(f.dialog) 
+    {
+        for(auto str: f.additionalFeatures) {
+            str.ensure16Bit();
+            base::string16 destStr((const base::char16*)str.characters16(), str.length());
+            
+            additionalFeatures.push_back(destStr);
+        }
+    }
 
   operator WindowFeatures() const {
     WindowFeatures result;
@@ -119,7 +126,7 @@ struct WebWindowFeatures {
     result.fullscreen = fullscreen;
     result.dialog = dialog;
     for (size_t i = 0; i < additionalFeatures.size(); ++i)
-      result.additionalFeatures.append(additionalFeatures[i]);
+      result.additionalFeatures.append(WTF::String(additionalFeatures[i].data(), additionalFeatures[i].length()));
     return result;
   }
 #endif
diff --git a/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.cpp b/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.cpp
index 69dce5bc63..d4b83fc2df 100644
--- a/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.cpp
+++ b/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.cpp
@@ -27,6 +27,8 @@ bool StructTraits<::blink::mojom::WindowFeaturesDataView,
   out->resizable = data.resizable();
   out->fullscreen = data.fullscreen();
   out->dialog = data.dialog();
+  
+  data.ReadAdditionalfeatures(&out->additionalFeatures);
   return true;
 }
 
diff --git a/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.h b/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.h
index ca776ed5a0..405fb49855 100644
--- a/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.h
+++ b/chromium/third_party/WebKit/public/web/WindowFeaturesStructTraits.h
@@ -65,6 +65,10 @@ struct StructTraits<::blink::mojom::WindowFeaturesDataView,
     return features.dialog;
   }
 
+  static std::vector<base::string16> additionalFeatures(const ::blink::WebWindowFeatures& features) {
+    return features.additionalFeatures;
+  }
+
   static bool Read(::blink::mojom::WindowFeaturesDataView,
                    ::blink::WebWindowFeatures* out);
 };
diff --git a/chromium/third_party/WebKit/public/web/window_features.mojom b/chromium/third_party/WebKit/public/web/window_features.mojom
index a26b8a3b44..cb21f157d5 100644
--- a/chromium/third_party/WebKit/public/web/window_features.mojom
+++ b/chromium/third_party/WebKit/public/web/window_features.mojom
@@ -30,4 +30,6 @@ struct WindowFeatures {
     // NOTE: WebWindowFeatures::additionalFeatures is not mirrored by this
     // mojom struct as it's never used by the browser and therefore doesn't need
     // to be sent.
+	// ... but webOS/LuneOS apps need that to send additional info to the OS
+    array<string> additionalFeatures;
 };
-- 
2.17.0

